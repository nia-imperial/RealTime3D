/****************************************************************************
**
** Namespace WIA generated by dumpcpp v5.15.2 using
** dumpcpp -o wiaaut C:\Windows\system32\wiaaut.dll
** from the type library C:\Windows\system32\wiaaut.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_WIAAUT_H
#define QAX_DUMPCPP_WIAAUT_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef WIA_EXPORT
#define WIA_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace WIA {

    enum WiaDeviceType {
        UnspecifiedDeviceType   = 0,
        ScannerDeviceType       = 1,
        CameraDeviceType        = 2,
        VideoDeviceType         = 3
    };

    enum WiaEventFlag {
        NotificationEvent       = 1,
        ActionEvent             = 2
    };

    enum WiaImageBias {
        MinimizeSize            = 65536,
        MaximizeQuality         = 131072
    };

    enum WiaImageIntent {
        UnspecifiedIntent       = 0,
        ColorIntent             = 1,
        GrayscaleIntent         = 2,
        TextIntent              = 4
    };

    enum WiaImagePropertyType {
        UndefinedImagePropertyType= 1000,
        ByteImagePropertyType   = 1001,
        StringImagePropertyType = 1002,
        UnsignedIntegerImagePropertyType= 1003,
        LongImagePropertyType   = 1004,
        UnsignedLongImagePropertyType= 1005,
        RationalImagePropertyType= 1006,
        UnsignedRationalImagePropertyType= 1007,
        VectorOfUndefinedImagePropertyType= 1100,
        VectorOfBytesImagePropertyType= 1101,
        VectorOfUnsignedIntegersImagePropertyType= 1102,
        VectorOfLongsImagePropertyType= 1103,
        VectorOfUnsignedLongsImagePropertyType= 1104,
        VectorOfRationalsImagePropertyType= 1105,
        VectorOfUnsignedRationalsImagePropertyType= 1106
    };

    enum WiaItemFlag {
        FreeItemFlag            = 0,
        ImageItemFlag           = 1,
        FileItemFlag            = 2,
        FolderItemFlag          = 4,
        RootItemFlag            = 8,
        AnalyzeItemFlag         = 16,
        AudioItemFlag           = 32,
        DeviceItemFlag          = 64,
        DeletedItemFlag         = 128,
        DisconnectedItemFlag    = 256,
        HPanoramaItemFlag       = 512,
        VPanoramaItemFlag       = 1024,
        BurstItemFlag           = 2048,
        StorageItemFlag         = 4096,
        TransferItemFlag        = 8192,
        GeneratedItemFlag       = 16384,
        HasAttachmentsItemFlag  = 32768,
        VideoItemFlag           = 65536,
        RemovedItemFlag         = -2147483648
    };

    enum WiaPropertyType {
        UnsupportedPropertyType = 0,
        BooleanPropertyType     = 1,
        BytePropertyType        = 2,
        IntegerPropertyType     = 3,
        UnsignedIntegerPropertyType= 4,
        LongPropertyType        = 5,
        UnsignedLongPropertyType= 6,
        ErrorCodePropertyType   = 7,
        LargeIntegerPropertyType= 8,
        UnsignedLargeIntegerPropertyType= 9,
        SinglePropertyType      = 10,
        DoublePropertyType      = 11,
        CurrencyPropertyType    = 12,
        DatePropertyType        = 13,
        FileTimePropertyType    = 14,
        ClassIDPropertyType     = 15,
        StringPropertyType      = 16,
        ObjectPropertyType      = 17,
        HandlePropertyType      = 18,
        VariantPropertyType     = 19,
        VectorOfBooleansPropertyType= 101,
        VectorOfBytesPropertyType= 102,
        VectorOfIntegersPropertyType= 103,
        VectorOfUnsignedIntegersPropertyType= 104,
        VectorOfLongsPropertyType= 105,
        VectorOfUnsignedLongsPropertyType= 106,
        VectorOfErrorCodesPropertyType= 107,
        VectorOfLargeIntegersPropertyType= 108,
        VectorOfUnsignedLargeIntegersPropertyType= 109,
        VectorOfSinglesPropertyType= 110,
        VectorOfDoublesPropertyType= 111,
        VectorOfCurrenciesPropertyType= 112,
        VectorOfDatesPropertyType= 113,
        VectorOfFileTimesPropertyType= 114,
        VectorOfClassIDsPropertyType= 115,
        VectorOfStringsPropertyType= 116,
        VectorOfVariantsPropertyType= 119
    };

    enum WiaSubType {
        UnspecifiedSubType      = 0,
        RangeSubType            = 1,
        ListSubType             = 2,
        FlagSubType             = 3
    };

// forward declarations
    enum WiaSubType;
    enum WiaDeviceType;
    enum WiaItemFlag;
    enum WiaPropertyType;
    enum WiaImagePropertyType;
    enum WiaEventFlag;
    enum WiaImageIntent;
    enum WiaImageBias;
    enum WiaSubType;
    enum WiaDeviceType;
    enum WiaItemFlag;
    enum WiaPropertyType;
    enum WiaImagePropertyType;
    enum WiaEventFlag;
    enum WiaImageIntent;
    enum WiaImageBias;
    class IVector;
    class IProperties;
    class IImageFile;
    class IProperty;
    class IFilterInfo;
    class IFilter;
    class IFilterInfos;
    class IFilters;
    class IDeviceCommand;
    class IItem;
    class IItems;
    class IFormats;
    class IDeviceCommands;
    class IDeviceEvent;
    class IDeviceEvents;
    class IDevice;
    class IDeviceInfo;
    class IDeviceInfos;

class WIA_EXPORT IRational : public QAxObject
{
public:
    explicit IRational(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Denominator

    Returns/Sets the Rational Value Denominator

    */
    inline int Denominator() const; //Returns the value of Denominator
    inline void SetDenominator(int value); //Sets the value of the Denominator property

    /*
    Property Numerator

    Returns/Sets the Rational Value Numerator

    */
    inline int Numerator() const; //Returns the value of Numerator
    inline void SetNumerator(int value); //Sets the value of the Numerator property

    /*
    Property Value

    Returns the Rational Value as a Double

    */
    inline double Value() const; //Returns the value of Value

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IImageFile : public QAxObject
{
public:
    explicit IImageFile(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property ARGBData

    Returns the raw image bits as a Vector of Long values

    */
    inline WIA::IVector* ARGBData() const; //Returns the value of ARGBData

    /*
    Property ActiveFrame

    Returns/Sets the current frame in the image

    */
    inline int ActiveFrame() const; //Returns the value of ActiveFrame
    inline void SetActiveFrame(int value); //Sets the value of the ActiveFrame property

    /*
    Property FileData

    Returns the raw image file as a Vector of Bytes

    */
    inline WIA::IVector* FileData() const; //Returns the value of FileData

    /*
    Property FileExtension

    Returns the file extension for this image file type

    */
    inline QString FileExtension() const; //Returns the value of FileExtension

    /*
    Property FormatID

    Returns the FormatID for this file type

    */
    inline QString FormatID() const; //Returns the value of FormatID

    /*
    Property FrameCount

    Returns the number of frames in the image

    */
    inline int FrameCount() const; //Returns the value of FrameCount

    /*
    Property Height

    Returns the Height of the image in pixels

    */
    inline int Height() const; //Returns the value of Height

    /*
    Property HorizontalResolution

    Returns the Horizontal pixels per inch of the image

    */
    inline double HorizontalResolution() const; //Returns the value of HorizontalResolution

    /*
    Property IsAlphaPixelFormat

    Indicates if the pixel format has an alpha component

    */
    inline bool IsAlphaPixelFormat() const; //Returns the value of IsAlphaPixelFormat

    /*
    Property IsAnimated

    Indicates whether the image is animated

    */
    inline bool IsAnimated() const; //Returns the value of IsAnimated

    /*
    Property IsExtendedPixelFormat

    Indicates if the pixel format is extended (16 bits/channel)

    */
    inline bool IsExtendedPixelFormat() const; //Returns the value of IsExtendedPixelFormat

    /*
    Property IsIndexedPixelFormat

    Indicates if the pixel data is an index into a palette or the actual color data

    */
    inline bool IsIndexedPixelFormat() const; //Returns the value of IsIndexedPixelFormat

    /*
    Property PixelDepth

    Returns the depth of the pixels of the image in bits per pixel

    */
    inline int PixelDepth() const; //Returns the value of PixelDepth

    /*
    Property Properties

    A collection of all properties for this image

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property VerticalResolution

    Returns the Vertical pixels per inch of the image

    */
    inline double VerticalResolution() const; //Returns the value of VerticalResolution

    /*
    Property Width

    Returns the Width of the image in pixels

    */
    inline int Width() const; //Returns the value of Width

    /*
    Method LoadFile

    Loads the ImageFile object with the specified File

    */
    inline void LoadFile(const QString& Filename);

    /*
    Method SaveFile

    Save the ImageFile object to the specified File

    */
    inline void SaveFile(const QString& Filename);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IVector : public QAxObject
{
public:
    explicit IVector(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property BinaryData

    Returns/Sets the Vector of Bytes as an array of bytes

    */
    inline QVariant BinaryData() const; //Returns the value of BinaryData
    inline void SetBinaryData(const QVariant& value); //Sets the value of the BinaryData property

    /*
    Property Count

    Returns the number of members in the vector

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Date

    Returns/Sets the Vector of Integers from a Date

    */
    inline QDateTime Date() const; //Returns the value of Date
    inline void SetDate(const QDateTime& value); //Sets the value of the Date property

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    If Index is not zero, Inserts a new element into the Vector collection before the specified Index. If Index is zero, Appends a new element to the Vector collection.

    */
    inline void Add(QVariant& Value);

    /*
    Method Add

    If Index is not zero, Inserts a new element into the Vector collection before the specified Index. If Index is zero, Appends a new element to the Vector collection.

    */
    inline void Add(QVariant& Value, int Index);

    /*
    Method Clear

    Removes all elements.

    */
    inline void Clear();

    /*
    Method ImageFile

    Used to get the Thumbnail property of an ImageFile which is an image file, The thumbnail property of an Item which is RGB data, or creating an ImageFile from raw ARGB data. Returns an ImageFile object on success. See the Picture method for more details.

    */
    inline WIA::IImageFile* ImageFile();

    /*
    Method ImageFile

    Used to get the Thumbnail property of an ImageFile which is an image file, The thumbnail property of an Item which is RGB data, or creating an ImageFile from raw ARGB data. Returns an ImageFile object on success. See the Picture method for more details.

    */
    inline WIA::IImageFile* ImageFile(int Width);

    /*
    Method ImageFile

    Used to get the Thumbnail property of an ImageFile which is an image file, The thumbnail property of an Item which is RGB data, or creating an ImageFile from raw ARGB data. Returns an ImageFile object on success. See the Picture method for more details.

    */
    inline WIA::IImageFile* ImageFile(int Width, int Height);

    /*
    Method Item

    Returns/Sets the specified item in the vector by position

    */
    inline QVariant Item(int Index);

    /*
    Method Picture

    If the Vector of Bytes contains an image file, then Width and Height are ignored. Otherwise a Vector of Bytes must be RGB data and a Vector of Longs must be ARGB data. Returns a Picture object on success. See the ImageFile method for more details.

    */
    inline QVariant Picture();

    /*
    Method Picture

    If the Vector of Bytes contains an image file, then Width and Height are ignored. Otherwise a Vector of Bytes must be RGB data and a Vector of Longs must be ARGB data. Returns a Picture object on success. See the ImageFile method for more details.

    */
    inline QVariant Picture(int Width);

    /*
    Method Picture

    If the Vector of Bytes contains an image file, then Width and Height are ignored. Otherwise a Vector of Bytes must be RGB data and a Vector of Longs must be ARGB data. Returns a Picture object on success. See the ImageFile method for more details.

    */
    inline QVariant Picture(int Width, int Height);

    /*
    Method Remove

    Removes the designated element and returns it if successful

    */
    inline QVariant Remove(int Index);

    /*
    Method SetFromString

    Stores the string Value into the Vector of Bytes including the NULL terminator. Value may be truncated unless Resizable is True. The string will be stored as an ANSI string unless Unicode is True, in which case it will be stored as a Unicode string.

    */
    inline void SetFromString(const QString& Value);

    /*
    Method SetFromString

    Stores the string Value into the Vector of Bytes including the NULL terminator. Value may be truncated unless Resizable is True. The string will be stored as an ANSI string unless Unicode is True, in which case it will be stored as a Unicode string.

    */
    inline void SetFromString(const QString& Value, bool Resizable);

    /*
    Method SetFromString

    Stores the string Value into the Vector of Bytes including the NULL terminator. Value may be truncated unless Resizable is True. The string will be stored as an ANSI string unless Unicode is True, in which case it will be stored as a Unicode string.

    */
    inline void SetFromString(const QString& Value, bool Resizable, bool Unicode);

    /*
    Method SetItem
    */
    inline void SetItem(int Index, QVariant& rhs);

    /*
    Method String

    Returns a Vector of Bytes as a String

    */
    inline QString String();

    /*
    Method String

    Returns a Vector of Bytes as a String

    */
    inline QString String(bool Unicode);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IProperties : public QAxObject
{
public:
    explicit IProperties(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Exists

    Indicates whether the specified Property exists in the collection

    */
    inline bool Exists(QVariant& Index);

    /*
    Method Item

    Returns the specified item in the collection either by position or name.

    */
    inline WIA::IProperty* Item(QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IProperty : public QAxObject
{
public:
    explicit IProperty(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property IsReadOnly

    Indicates whether the Property Value is read only

    */
    inline bool IsReadOnly() const; //Returns the value of IsReadOnly

    /*
    Property IsVector

    Indicates whether the Property Value is a vector

    */
    inline bool IsVector() const; //Returns the value of IsVector

    /*
    Property Name

    Returns the Property Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property PropertyID

    Returns the PropertyID of this Property

    */
    inline int PropertyID() const; //Returns the value of PropertyID

    /*
    Property SubType

    Returns the SubType of the Property, if any

    */
    inline WIA::WiaSubType SubType() const; //Returns the value of SubType

    /*
    Property SubTypeDefault

    Returns the default Property Value if the SubType is not UnspecifiedSubType

    */
    inline QVariant SubTypeDefault() const; //Returns the value of SubTypeDefault

    /*
    Property SubTypeMax

    Returns the maximum valid Property Value if the SubType is RangeSubType

    */
    inline int SubTypeMax() const; //Returns the value of SubTypeMax

    /*
    Property SubTypeMin

    Returns the minimum valid Property Value if the SubType is RangeSubType

    */
    inline int SubTypeMin() const; //Returns the value of SubTypeMin

    /*
    Property SubTypeStep

    Returns the step increment of Property Values if the SubType is RangeSubType

    */
    inline int SubTypeStep() const; //Returns the value of SubTypeStep

    /*
    Property SubTypeValues

    Returns a Vector of valid Property Values if the SubType is ListSubType or valid flag Values that can be ored together if the SubType is FlagSubType

    */
    inline WIA::IVector* SubTypeValues() const; //Returns the value of SubTypeValues

    /*
    Property Type

    Returns either a WiaPropertyType or a WiaImagePropertyType

    */
    inline int Type() const; //Returns the value of Type

    /*
    Property Value

    Returns/Sets the Property Value

    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IFilterInfo : public QAxObject
{
public:
    explicit IFilterInfo(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Description

    Returns a technical Description of what the filter does and how to use it in a filter chain

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property FilterID

    Returns the FilterID for this filter

    */
    inline QString FilterID() const; //Returns the value of FilterID

    /*
    Property Name

    Returns the FilterInfo Name

    */
    inline QString Name() const; //Returns the value of Name

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IFilterInfos : public QAxObject
{
public:
    explicit IFilterInfos(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection either by position or name

    */
    inline WIA::IFilterInfo* Item(QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IFilter : public QAxObject
{
public:
    explicit IFilter(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Description

    Returns a Description of what the filter does

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property FilterID

    Returns the FilterID for this Filter

    */
    inline QString FilterID() const; //Returns the value of FilterID

    /*
    Property Name

    Returns the Filter Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Properties

    A collection of all properties for this filter

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IFilters : public QAxObject
{
public:
    explicit IFilters(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Appends/Inserts a new Filter of the specified FilterID into a Filter collection

    */
    inline void Add(const QString& FilterID);

    /*
    Method Add

    Appends/Inserts a new Filter of the specified FilterID into a Filter collection

    */
    inline void Add(const QString& FilterID, int Index);

    /*
    Method Item

    Returns the specified item in the collection by position or FilterID

    */
    inline WIA::IFilter* Item(int Index);

    /*
    Method Remove

    Removes the designated filter

    */
    inline void Remove(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IImageProcess : public QAxObject
{
public:
    explicit IImageProcess(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property FilterInfos

    A collection of all available filters

    */
    inline WIA::IFilterInfos* FilterInfos() const; //Returns the value of FilterInfos

    /*
    Property Filters

    A collection of the filters to be applied in this process

    */
    inline WIA::IFilters* Filters() const; //Returns the value of Filters

    /*
    Method Apply

    Takes the specified ImageFile and returns the new ImageFile with all the filters applied on success

    */
    inline WIA::IImageFile* Apply(WIA::IImageFile* Source);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IFormats : public QAxObject
{
public:
    explicit IFormats(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline QString Item(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDeviceCommand : public QAxObject
{
public:
    explicit IDeviceCommand(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property CommandID

    Returns the commandID for this Command

    */
    inline QString CommandID() const; //Returns the value of CommandID

    /*
    Property Description

    Returns the command Description

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property Name

    Returns the command Name

    */
    inline QString Name() const; //Returns the value of Name

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDeviceCommands : public QAxObject
{
public:
    explicit IDeviceCommands(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline WIA::IDeviceCommand* Item(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IItems : public QAxObject
{
public:
    explicit IItems(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Adds a new Item with the specified Name and Flags. The Flags value is created by using the OR operation with members of the WiaItemFlags enumeration.

    */
    inline void Add(const QString& Name, int Flags);

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline WIA::IItem* Item(int Index);

    /*
    Method Remove

    Removes the designated Item

    */
    inline void Remove(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IItem : public QAxObject
{
public:
    explicit IItem(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Commands

    A collection of all commands for this item

    */
    inline WIA::IDeviceCommands* Commands() const; //Returns the value of Commands

    /*
    Property Formats

    A collection of all supported format types for this item

    */
    inline WIA::IFormats* Formats() const; //Returns the value of Formats

    /*
    Property ItemID

    Returns the ItemID for this Item

    */
    inline QString ItemID() const; //Returns the value of ItemID

    /*
    Property Items

    A collection of all child items for this item

    */
    inline WIA::IItems* Items() const; //Returns the value of Items

    /*
    Property Properties

    A collection of all properties for this item

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property WiaItem

    Returns the underlying IWiaItem interface for this Item object

    */
    inline IUnknown* WiaItem() const; //Returns the value of WiaItem

    /*
    Method ExecuteCommand

    Issues the command specified by CommandID. CommandIDs are device dependent. Valid CommandIDs for this Item are contained in the Commands collection.

    */
    inline WIA::IItem* ExecuteCommand(const QString& CommandID);

    /*
    Method Transfer

    Returns an ImageFile object, in this version, in the format specified in FormatID if supported, otherwise using the preferred format for this imaging device. Future versions may return a collection of ImageFile objects.

    */
    inline QVariant Transfer();

    /*
    Method Transfer

    Returns an ImageFile object, in this version, in the format specified in FormatID if supported, otherwise using the preferred format for this imaging device. Future versions may return a collection of ImageFile objects.

    */
    inline QVariant Transfer(const QString& FormatID);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDeviceEvent : public QAxObject
{
public:
    explicit IDeviceEvent(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Description

    Returns the event Description

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property EventID

    Returns the EventID for this Event

    */
    inline QString EventID() const; //Returns the value of EventID

    /*
    Property Name

    Returns the event Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Type

    Returns the Type of this Event

    */
    inline WIA::WiaEventFlag Type() const; //Returns the value of Type

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDeviceEvents : public QAxObject
{
public:
    explicit IDeviceEvents(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline WIA::IDeviceEvent* Item(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDevice : public QAxObject
{
public:
    explicit IDevice(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Commands

    A collection of all commands for this imaging device

    */
    inline WIA::IDeviceCommands* Commands() const; //Returns the value of Commands

    /*
    Property DeviceID

    Returns the DeviceID for this Device

    */
    inline QString DeviceID() const; //Returns the value of DeviceID

    /*
    Property Events

    A collection of all events for this imaging device

    */
    inline WIA::IDeviceEvents* Events() const; //Returns the value of Events

    /*
    Property Items

    A collection of all items for this imaging device

    */
    inline WIA::IItems* Items() const; //Returns the value of Items

    /*
    Property Properties

    A collection of all properties for this imaging device

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property Type

    Returns the Type of Device

    */
    inline WIA::WiaDeviceType Type() const; //Returns the value of Type

    /*
    Property WiaItem

    Returns the underlying IWiaItem interface for this Device object

    */
    inline IUnknown* WiaItem() const; //Returns the value of WiaItem

    /*
    Method ExecuteCommand

    Issues the command specified by CommandID to the imaging device. CommandIDs are device dependent. Valid CommandIDs for this Device are contained in the Commands collection.

    */
    inline WIA::IItem* ExecuteCommand(const QString& CommandID);

    /*
    Method GetItem

    Returns the Item object specified by ItemID if it exists

    */
    inline WIA::IItem* GetItem(const QString& ItemID);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDeviceInfo : public QAxObject
{
public:
    explicit IDeviceInfo(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property DeviceID

    Returns the DeviceID for this Device

    */
    inline QString DeviceID() const; //Returns the value of DeviceID

    /*
    Property Properties

    A collection of all properties for this imaging device that are applicable when the device is not connected

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property Type

    Returns the Type of Device

    */
    inline WIA::WiaDeviceType Type() const; //Returns the value of Type

    /*
    Method Connect

    Establish a connection with this device and return a Device object

    */
    inline WIA::IDevice* Connect();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDeviceInfos : public QAxObject
{
public:
    explicit IDeviceInfos(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection either by position or Device ID

    */
    inline WIA::IDeviceInfo* Item(QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT ICommonDialog : public QAxObject
{
public:
    explicit ICommonDialog(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage();

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI, bool CancelError);

    /*
    Method ShowAcquisitionWizard

    Launches the Windows Scanner and Camera Wizard and returns Nothing. Future versions may return a collection of ImageFile objects.

    */
    inline QVariant ShowAcquisitionWizard(WIA::IDevice* Device);

    /*
    Method ShowDeviceProperties

    Displays the properties dialog box for the specified Device

    */
    inline void ShowDeviceProperties(WIA::IDevice* Device);

    /*
    Method ShowDeviceProperties

    Displays the properties dialog box for the specified Device

    */
    inline void ShowDeviceProperties(WIA::IDevice* Device, bool CancelError);

    /*
    Method ShowItemProperties

    Displays the properties dialog box for the specified Item

    */
    inline void ShowItemProperties(WIA::IItem* Item);

    /*
    Method ShowItemProperties

    Displays the properties dialog box for the specified Item

    */
    inline void ShowItemProperties(WIA::IItem* Item, bool CancelError);

    /*
    Method ShowPhotoPrintingWizard

    Launches the Photo Printing Wizard with the absolute path of a specific file or Vector of absolute paths to files

    */
    inline void ShowPhotoPrintingWizard(QVariant& Files);

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice();

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice(WIA::WiaDeviceType DeviceType);

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice);

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice, bool CancelError);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI, bool CancelError);

    /*
    Method ShowTransfer

    Displays a progress dialog box while transferring the specified Item to the local machine. See Item.Transfer for additional information.

    */
    inline QVariant ShowTransfer(WIA::IItem* Item);

    /*
    Method ShowTransfer

    Displays a progress dialog box while transferring the specified Item to the local machine. See Item.Transfer for additional information.

    */
    inline QVariant ShowTransfer(WIA::IItem* Item, const QString& FormatID);

    /*
    Method ShowTransfer

    Displays a progress dialog box while transferring the specified Item to the local machine. See Item.Transfer for additional information.

    */
    inline QVariant ShowTransfer(WIA::IItem* Item, const QString& FormatID, bool CancelError);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT IDeviceManager : public QAxObject
{
public:
    explicit IDeviceManager(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property DeviceInfos

    A collection of all imaging devices connected to this computer

    */
    inline WIA::IDeviceInfos* DeviceInfos() const; //Returns the value of DeviceInfos

    /*
    Method RegisterEvent

    Registers the specified EventID for the specified DeviceID. If DeviceID is "*" then OnEvent will be called whenever the event specified occurs for any device. Otherwise, OnEvent will only be called if the event specified occurs on the device specified.

    */
    inline void RegisterEvent(const QString& EventID);

    /*
    Method RegisterEvent

    Registers the specified EventID for the specified DeviceID. If DeviceID is "*" then OnEvent will be called whenever the event specified occurs for any device. Otherwise, OnEvent will only be called if the event specified occurs on the device specified.

    */
    inline void RegisterEvent(const QString& EventID, const QString& DeviceID);

    /*
    Method RegisterPersistentEvent

    Registers the specified Command to launch when the specified EventID for the specified DeviceID occurs. Command can be either a ClassID or the full path name and the appropriate command-line arguments needed to invoke the application.

    */
    inline void RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID);

    /*
    Method RegisterPersistentEvent

    Registers the specified Command to launch when the specified EventID for the specified DeviceID occurs. Command can be either a ClassID or the full path name and the appropriate command-line arguments needed to invoke the application.

    */
    inline void RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID);

    /*
    Method UnregisterEvent

    Unregisters the specified EventID for the specified DeviceID. UnregisterEvent should only be called for EventID and DeviceID for which you called RegisterEvent.

    */
    inline void UnregisterEvent(const QString& EventID);

    /*
    Method UnregisterEvent

    Unregisters the specified EventID for the specified DeviceID. UnregisterEvent should only be called for EventID and DeviceID for which you called RegisterEvent.

    */
    inline void UnregisterEvent(const QString& EventID, const QString& DeviceID);

    /*
    Method UnregisterPersistentEvent

    Unregisters the specified Command for the specified EventID for the specified DeviceID. UnregisterPersistentEvent should only be called for the Command, Name, Description, Icon, EventID and DeviceID for which you called RegisterPersistentEvent.

    */
    inline void UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID);

    /*
    Method UnregisterPersistentEvent

    Unregisters the specified Command for the specified EventID for the specified DeviceID. UnregisterPersistentEvent should only be called for the Command, Name, Description, Icon, EventID and DeviceID for which you called RegisterPersistentEvent.

    */
    inline void UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

// skipping event interface _IDeviceManagerEvents

// Actual coclasses
class WIA_EXPORT Rational : public QAxObject
{
public:
    explicit Rational(QObject *parent = nullptr);
    Rational(IRational *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Denominator

    Returns/Sets the Rational Value Denominator

    */
    inline int Denominator() const; //Returns the value of Denominator
    inline void SetDenominator(int value); //Sets the value of the Denominator property

    /*
    Property Numerator

    Returns/Sets the Rational Value Numerator

    */
    inline int Numerator() const; //Returns the value of Numerator
    inline void SetNumerator(int value); //Sets the value of the Numerator property

    /*
    Property Value

    Returns the Rational Value as a Double

    */
    inline double Value() const; //Returns the value of Value

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Vector : public QAxObject
{
public:
    explicit Vector(QObject *parent = nullptr);
    Vector(IVector *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BinaryData

    Returns/Sets the Vector of Bytes as an array of bytes

    */
    inline QVariant BinaryData() const; //Returns the value of BinaryData
    inline void SetBinaryData(const QVariant& value); //Sets the value of the BinaryData property

    /*
    Property Count

    Returns the number of members in the vector

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property Date

    Returns/Sets the Vector of Integers from a Date

    */
    inline QDateTime Date() const; //Returns the value of Date
    inline void SetDate(const QDateTime& value); //Sets the value of the Date property

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    If Index is not zero, Inserts a new element into the Vector collection before the specified Index. If Index is zero, Appends a new element to the Vector collection.

    */
    inline void Add(QVariant& Value);

    /*
    Method Add

    If Index is not zero, Inserts a new element into the Vector collection before the specified Index. If Index is zero, Appends a new element to the Vector collection.

    */
    inline void Add(QVariant& Value, int Index);

    /*
    Method Clear

    Removes all elements.

    */
    inline void Clear();

    /*
    Method ImageFile

    Used to get the Thumbnail property of an ImageFile which is an image file, The thumbnail property of an Item which is RGB data, or creating an ImageFile from raw ARGB data. Returns an ImageFile object on success. See the Picture method for more details.

    */
    inline WIA::IImageFile* ImageFile();

    /*
    Method ImageFile

    Used to get the Thumbnail property of an ImageFile which is an image file, The thumbnail property of an Item which is RGB data, or creating an ImageFile from raw ARGB data. Returns an ImageFile object on success. See the Picture method for more details.

    */
    inline WIA::IImageFile* ImageFile(int Width);

    /*
    Method ImageFile

    Used to get the Thumbnail property of an ImageFile which is an image file, The thumbnail property of an Item which is RGB data, or creating an ImageFile from raw ARGB data. Returns an ImageFile object on success. See the Picture method for more details.

    */
    inline WIA::IImageFile* ImageFile(int Width, int Height);

    /*
    Method Item

    Returns/Sets the specified item in the vector by position

    */
    inline QVariant Item(int Index);

    /*
    Method Picture

    If the Vector of Bytes contains an image file, then Width and Height are ignored. Otherwise a Vector of Bytes must be RGB data and a Vector of Longs must be ARGB data. Returns a Picture object on success. See the ImageFile method for more details.

    */
    inline QVariant Picture();

    /*
    Method Picture

    If the Vector of Bytes contains an image file, then Width and Height are ignored. Otherwise a Vector of Bytes must be RGB data and a Vector of Longs must be ARGB data. Returns a Picture object on success. See the ImageFile method for more details.

    */
    inline QVariant Picture(int Width);

    /*
    Method Picture

    If the Vector of Bytes contains an image file, then Width and Height are ignored. Otherwise a Vector of Bytes must be RGB data and a Vector of Longs must be ARGB data. Returns a Picture object on success. See the ImageFile method for more details.

    */
    inline QVariant Picture(int Width, int Height);

    /*
    Method Remove

    Removes the designated element and returns it if successful

    */
    inline QVariant Remove(int Index);

    /*
    Method SetFromString

    Stores the string Value into the Vector of Bytes including the NULL terminator. Value may be truncated unless Resizable is True. The string will be stored as an ANSI string unless Unicode is True, in which case it will be stored as a Unicode string.

    */
    inline void SetFromString(const QString& Value);

    /*
    Method SetFromString

    Stores the string Value into the Vector of Bytes including the NULL terminator. Value may be truncated unless Resizable is True. The string will be stored as an ANSI string unless Unicode is True, in which case it will be stored as a Unicode string.

    */
    inline void SetFromString(const QString& Value, bool Resizable);

    /*
    Method SetFromString

    Stores the string Value into the Vector of Bytes including the NULL terminator. Value may be truncated unless Resizable is True. The string will be stored as an ANSI string unless Unicode is True, in which case it will be stored as a Unicode string.

    */
    inline void SetFromString(const QString& Value, bool Resizable, bool Unicode);

    /*
    Method SetItem
    */
    inline void SetItem(int Index, QVariant& rhs);

    /*
    Method String

    Returns a Vector of Bytes as a String

    */
    inline QString String();

    /*
    Method String

    Returns a Vector of Bytes as a String

    */
    inline QString String(bool Unicode);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Property : public QAxObject
{
public:
    explicit Property(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Property(IProperty *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property IsReadOnly

    Indicates whether the Property Value is read only

    */
    inline bool IsReadOnly() const; //Returns the value of IsReadOnly

    /*
    Property IsVector

    Indicates whether the Property Value is a vector

    */
    inline bool IsVector() const; //Returns the value of IsVector

    /*
    Property Name

    Returns the Property Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property PropertyID

    Returns the PropertyID of this Property

    */
    inline int PropertyID() const; //Returns the value of PropertyID

    /*
    Property SubType

    Returns the SubType of the Property, if any

    */
    inline WIA::WiaSubType SubType() const; //Returns the value of SubType

    /*
    Property SubTypeDefault

    Returns the default Property Value if the SubType is not UnspecifiedSubType

    */
    inline QVariant SubTypeDefault() const; //Returns the value of SubTypeDefault

    /*
    Property SubTypeMax

    Returns the maximum valid Property Value if the SubType is RangeSubType

    */
    inline int SubTypeMax() const; //Returns the value of SubTypeMax

    /*
    Property SubTypeMin

    Returns the minimum valid Property Value if the SubType is RangeSubType

    */
    inline int SubTypeMin() const; //Returns the value of SubTypeMin

    /*
    Property SubTypeStep

    Returns the step increment of Property Values if the SubType is RangeSubType

    */
    inline int SubTypeStep() const; //Returns the value of SubTypeStep

    /*
    Property SubTypeValues

    Returns a Vector of valid Property Values if the SubType is ListSubType or valid flag Values that can be ored together if the SubType is FlagSubType

    */
    inline WIA::IVector* SubTypeValues() const; //Returns the value of SubTypeValues

    /*
    Property Type

    Returns either a WiaPropertyType or a WiaImagePropertyType

    */
    inline int Type() const; //Returns the value of Type

    /*
    Property Value

    Returns/Sets the Property Value

    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Properties : public QAxObject
{
public:
    explicit Properties(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Properties(IProperties *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Exists

    Indicates whether the specified Property exists in the collection

    */
    inline bool Exists(QVariant& Index);

    /*
    Method Item

    Returns the specified item in the collection either by position or name.

    */
    inline WIA::IProperty* Item(QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT ImageFile : public QAxObject
{
public:
    explicit ImageFile(QObject *parent = nullptr);
    ImageFile(IImageFile *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ARGBData

    Returns the raw image bits as a Vector of Long values

    */
    inline WIA::IVector* ARGBData() const; //Returns the value of ARGBData

    /*
    Property ActiveFrame

    Returns/Sets the current frame in the image

    */
    inline int ActiveFrame() const; //Returns the value of ActiveFrame
    inline void SetActiveFrame(int value); //Sets the value of the ActiveFrame property

    /*
    Property FileData

    Returns the raw image file as a Vector of Bytes

    */
    inline WIA::IVector* FileData() const; //Returns the value of FileData

    /*
    Property FileExtension

    Returns the file extension for this image file type

    */
    inline QString FileExtension() const; //Returns the value of FileExtension

    /*
    Property FormatID

    Returns the FormatID for this file type

    */
    inline QString FormatID() const; //Returns the value of FormatID

    /*
    Property FrameCount

    Returns the number of frames in the image

    */
    inline int FrameCount() const; //Returns the value of FrameCount

    /*
    Property Height

    Returns the Height of the image in pixels

    */
    inline int Height() const; //Returns the value of Height

    /*
    Property HorizontalResolution

    Returns the Horizontal pixels per inch of the image

    */
    inline double HorizontalResolution() const; //Returns the value of HorizontalResolution

    /*
    Property IsAlphaPixelFormat

    Indicates if the pixel format has an alpha component

    */
    inline bool IsAlphaPixelFormat() const; //Returns the value of IsAlphaPixelFormat

    /*
    Property IsAnimated

    Indicates whether the image is animated

    */
    inline bool IsAnimated() const; //Returns the value of IsAnimated

    /*
    Property IsExtendedPixelFormat

    Indicates if the pixel format is extended (16 bits/channel)

    */
    inline bool IsExtendedPixelFormat() const; //Returns the value of IsExtendedPixelFormat

    /*
    Property IsIndexedPixelFormat

    Indicates if the pixel data is an index into a palette or the actual color data

    */
    inline bool IsIndexedPixelFormat() const; //Returns the value of IsIndexedPixelFormat

    /*
    Property PixelDepth

    Returns the depth of the pixels of the image in bits per pixel

    */
    inline int PixelDepth() const; //Returns the value of PixelDepth

    /*
    Property Properties

    A collection of all properties for this image

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property VerticalResolution

    Returns the Vertical pixels per inch of the image

    */
    inline double VerticalResolution() const; //Returns the value of VerticalResolution

    /*
    Property Width

    Returns the Width of the image in pixels

    */
    inline int Width() const; //Returns the value of Width

    /*
    Method LoadFile

    Loads the ImageFile object with the specified File

    */
    inline void LoadFile(const QString& Filename);

    /*
    Method SaveFile

    Save the ImageFile object to the specified File

    */
    inline void SaveFile(const QString& Filename);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT FilterInfo : public QAxObject
{
public:
    explicit FilterInfo(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    FilterInfo(IFilterInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Description

    Returns a technical Description of what the filter does and how to use it in a filter chain

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property FilterID

    Returns the FilterID for this filter

    */
    inline QString FilterID() const; //Returns the value of FilterID

    /*
    Property Name

    Returns the FilterInfo Name

    */
    inline QString Name() const; //Returns the value of Name

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT FilterInfos : public QAxObject
{
public:
    explicit FilterInfos(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    FilterInfos(IFilterInfos *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection either by position or name

    */
    inline WIA::IFilterInfo* Item(QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Filter : public QAxObject
{
public:
    explicit Filter(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Filter(IFilter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Description

    Returns a Description of what the filter does

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property FilterID

    Returns the FilterID for this Filter

    */
    inline QString FilterID() const; //Returns the value of FilterID

    /*
    Property Name

    Returns the Filter Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Properties

    A collection of all properties for this filter

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Filters : public QAxObject
{
public:
    explicit Filters(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Filters(IFilters *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Appends/Inserts a new Filter of the specified FilterID into a Filter collection

    */
    inline void Add(const QString& FilterID);

    /*
    Method Add

    Appends/Inserts a new Filter of the specified FilterID into a Filter collection

    */
    inline void Add(const QString& FilterID, int Index);

    /*
    Method Item

    Returns the specified item in the collection by position or FilterID

    */
    inline WIA::IFilter* Item(int Index);

    /*
    Method Remove

    Removes the designated filter

    */
    inline void Remove(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT ImageProcess : public QAxObject
{
public:
    explicit ImageProcess(QObject *parent = nullptr);
    ImageProcess(IImageProcess *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FilterInfos

    A collection of all available filters

    */
    inline WIA::IFilterInfos* FilterInfos() const; //Returns the value of FilterInfos

    /*
    Property Filters

    A collection of the filters to be applied in this process

    */
    inline WIA::IFilters* Filters() const; //Returns the value of Filters

    /*
    Method Apply

    Takes the specified ImageFile and returns the new ImageFile with all the filters applied on success

    */
    inline WIA::IImageFile* Apply(WIA::IImageFile* Source);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Formats : public QAxObject
{
public:
    explicit Formats(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Formats(IFormats *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline QString Item(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT DeviceCommand : public QAxObject
{
public:
    explicit DeviceCommand(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    DeviceCommand(IDeviceCommand *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CommandID

    Returns the commandID for this Command

    */
    inline QString CommandID() const; //Returns the value of CommandID

    /*
    Property Description

    Returns the command Description

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property Name

    Returns the command Name

    */
    inline QString Name() const; //Returns the value of Name

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT DeviceCommands : public QAxObject
{
public:
    explicit DeviceCommands(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    DeviceCommands(IDeviceCommands *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline WIA::IDeviceCommand* Item(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Item : public QAxObject
{
public:
    explicit Item(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Item(IItem *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Commands

    A collection of all commands for this item

    */
    inline WIA::IDeviceCommands* Commands() const; //Returns the value of Commands

    /*
    Property Formats

    A collection of all supported format types for this item

    */
    inline WIA::IFormats* Formats() const; //Returns the value of Formats

    /*
    Property ItemID

    Returns the ItemID for this Item

    */
    inline QString ItemID() const; //Returns the value of ItemID

    /*
    Property Items

    A collection of all child items for this item

    */
    inline WIA::IItems* Items() const; //Returns the value of Items

    /*
    Property Properties

    A collection of all properties for this item

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property WiaItem

    Returns the underlying IWiaItem interface for this Item object

    */
    inline IUnknown* WiaItem() const; //Returns the value of WiaItem

    /*
    Method ExecuteCommand

    Issues the command specified by CommandID. CommandIDs are device dependent. Valid CommandIDs for this Item are contained in the Commands collection.

    */
    inline WIA::IItem* ExecuteCommand(const QString& CommandID);

    /*
    Method Transfer

    Returns an ImageFile object, in this version, in the format specified in FormatID if supported, otherwise using the preferred format for this imaging device. Future versions may return a collection of ImageFile objects.

    */
    inline QVariant Transfer();

    /*
    Method Transfer

    Returns an ImageFile object, in this version, in the format specified in FormatID if supported, otherwise using the preferred format for this imaging device. Future versions may return a collection of ImageFile objects.

    */
    inline QVariant Transfer(const QString& FormatID);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Items : public QAxObject
{
public:
    explicit Items(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Items(IItems *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Adds a new Item with the specified Name and Flags. The Flags value is created by using the OR operation with members of the WiaItemFlags enumeration.

    */
    inline void Add(const QString& Name, int Flags);

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline WIA::IItem* Item(int Index);

    /*
    Method Remove

    Removes the designated Item

    */
    inline void Remove(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT DeviceEvent : public QAxObject
{
public:
    explicit DeviceEvent(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    DeviceEvent(IDeviceEvent *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Description

    Returns the event Description

    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property EventID

    Returns the EventID for this Event

    */
    inline QString EventID() const; //Returns the value of EventID

    /*
    Property Name

    Returns the event Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Type

    Returns the Type of this Event

    */
    inline WIA::WiaEventFlag Type() const; //Returns the value of Type

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT DeviceEvents : public QAxObject
{
public:
    explicit DeviceEvents(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    DeviceEvents(IDeviceEvents *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection by position

    */
    inline WIA::IDeviceEvent* Item(int Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT DeviceInfo : public QAxObject
{
public:
    explicit DeviceInfo(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    DeviceInfo(IDeviceInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DeviceID

    Returns the DeviceID for this Device

    */
    inline QString DeviceID() const; //Returns the value of DeviceID

    /*
    Property Properties

    A collection of all properties for this imaging device that are applicable when the device is not connected

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property Type

    Returns the Type of Device

    */
    inline WIA::WiaDeviceType Type() const; //Returns the value of Type

    /*
    Method Connect

    Establish a connection with this device and return a Device object

    */
    inline WIA::IDevice* Connect();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT DeviceInfos : public QAxObject
{
public:
    explicit DeviceInfos(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    DeviceInfos(IDeviceInfos *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of members in the collection

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Returns the specified item in the collection either by position or Device ID

    */
    inline WIA::IDeviceInfo* Item(QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT Device : public QAxObject
{
public:
    explicit Device(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    Device(IDevice *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Commands

    A collection of all commands for this imaging device

    */
    inline WIA::IDeviceCommands* Commands() const; //Returns the value of Commands

    /*
    Property DeviceID

    Returns the DeviceID for this Device

    */
    inline QString DeviceID() const; //Returns the value of DeviceID

    /*
    Property Events

    A collection of all events for this imaging device

    */
    inline WIA::IDeviceEvents* Events() const; //Returns the value of Events

    /*
    Property Items

    A collection of all items for this imaging device

    */
    inline WIA::IItems* Items() const; //Returns the value of Items

    /*
    Property Properties

    A collection of all properties for this imaging device

    */
    inline WIA::IProperties* Properties() const; //Returns the value of Properties

    /*
    Property Type

    Returns the Type of Device

    */
    inline WIA::WiaDeviceType Type() const; //Returns the value of Type

    /*
    Property WiaItem

    Returns the underlying IWiaItem interface for this Device object

    */
    inline IUnknown* WiaItem() const; //Returns the value of WiaItem

    /*
    Method ExecuteCommand

    Issues the command specified by CommandID to the imaging device. CommandIDs are device dependent. Valid CommandIDs for this Device are contained in the Commands collection.

    */
    inline WIA::IItem* ExecuteCommand(const QString& CommandID);

    /*
    Method GetItem

    Returns the Item object specified by ItemID if it exists

    */
    inline WIA::IItem* GetItem(const QString& ItemID);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT CommonDialog : public QAxWidget
{
public:
    explicit CommonDialog(QWidget *parent = nullptr, Qt::WindowFlags f = {});
    CommonDialog(ICommonDialog *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage();

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI);

    /*
    Method ShowAcquireImage

    Displays one or more dialog boxes that enable the user to acquire an image from a hardware device for image acquisition and returns an ImageFile object on success, otherwise Nothing

    */
    inline WIA::IImageFile* ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI, bool CancelError);

    /*
    Method ShowAcquisitionWizard

    Launches the Windows Scanner and Camera Wizard and returns Nothing. Future versions may return a collection of ImageFile objects.

    */
    inline QVariant ShowAcquisitionWizard(WIA::IDevice* Device);

    /*
    Method ShowDeviceProperties

    Displays the properties dialog box for the specified Device

    */
    inline void ShowDeviceProperties(WIA::IDevice* Device);

    /*
    Method ShowDeviceProperties

    Displays the properties dialog box for the specified Device

    */
    inline void ShowDeviceProperties(WIA::IDevice* Device, bool CancelError);

    /*
    Method ShowItemProperties

    Displays the properties dialog box for the specified Item

    */
    inline void ShowItemProperties(WIA::IItem* Item);

    /*
    Method ShowItemProperties

    Displays the properties dialog box for the specified Item

    */
    inline void ShowItemProperties(WIA::IItem* Item, bool CancelError);

    /*
    Method ShowPhotoPrintingWizard

    Launches the Photo Printing Wizard with the absolute path of a specific file or Vector of absolute paths to files

    */
    inline void ShowPhotoPrintingWizard(QVariant& Files);

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice();

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice(WIA::WiaDeviceType DeviceType);

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice);

    /*
    Method ShowSelectDevice

    Displays a dialog box that enables the user to select a hardware device for image acquisition. Returns the selected Device object on success, otherwise Nothing

    */
    inline WIA::IDevice* ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice, bool CancelError);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI);

    /*
    Method ShowSelectItems

    Displays a dialog box that enables the user to select an item for transfer from a hardware device for image acquisition. Returns the selection as an Items collection on success, otherwise Nothing

    */
    inline WIA::IItems* ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI, bool CancelError);

    /*
    Method ShowTransfer

    Displays a progress dialog box while transferring the specified Item to the local machine. See Item.Transfer for additional information.

    */
    inline QVariant ShowTransfer(WIA::IItem* Item);

    /*
    Method ShowTransfer

    Displays a progress dialog box while transferring the specified Item to the local machine. See Item.Transfer for additional information.

    */
    inline QVariant ShowTransfer(WIA::IItem* Item, const QString& FormatID);

    /*
    Method ShowTransfer

    Displays a progress dialog box while transferring the specified Item to the local machine. See Item.Transfer for additional information.

    */
    inline QVariant ShowTransfer(WIA::IItem* Item, const QString& FormatID, bool CancelError);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class WIA_EXPORT DeviceManager : public QAxWidget
{
public:
    explicit DeviceManager(QWidget *parent = nullptr, Qt::WindowFlags f = {});
    DeviceManager(IDeviceManager *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DeviceInfos

    A collection of all imaging devices connected to this computer

    */
    inline WIA::IDeviceInfos* DeviceInfos() const; //Returns the value of DeviceInfos

    /*
    Method RegisterEvent

    Registers the specified EventID for the specified DeviceID. If DeviceID is "*" then OnEvent will be called whenever the event specified occurs for any device. Otherwise, OnEvent will only be called if the event specified occurs on the device specified.

    */
    inline void RegisterEvent(const QString& EventID);

    /*
    Method RegisterEvent

    Registers the specified EventID for the specified DeviceID. If DeviceID is "*" then OnEvent will be called whenever the event specified occurs for any device. Otherwise, OnEvent will only be called if the event specified occurs on the device specified.

    */
    inline void RegisterEvent(const QString& EventID, const QString& DeviceID);

    /*
    Method RegisterPersistentEvent

    Registers the specified Command to launch when the specified EventID for the specified DeviceID occurs. Command can be either a ClassID or the full path name and the appropriate command-line arguments needed to invoke the application.

    */
    inline void RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID);

    /*
    Method RegisterPersistentEvent

    Registers the specified Command to launch when the specified EventID for the specified DeviceID occurs. Command can be either a ClassID or the full path name and the appropriate command-line arguments needed to invoke the application.

    */
    inline void RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID);

    /*
    Method UnregisterEvent

    Unregisters the specified EventID for the specified DeviceID. UnregisterEvent should only be called for EventID and DeviceID for which you called RegisterEvent.

    */
    inline void UnregisterEvent(const QString& EventID);

    /*
    Method UnregisterEvent

    Unregisters the specified EventID for the specified DeviceID. UnregisterEvent should only be called for EventID and DeviceID for which you called RegisterEvent.

    */
    inline void UnregisterEvent(const QString& EventID, const QString& DeviceID);

    /*
    Method UnregisterPersistentEvent

    Unregisters the specified Command for the specified EventID for the specified DeviceID. UnregisterPersistentEvent should only be called for the Command, Name, Description, Icon, EventID and DeviceID for which you called RegisterPersistentEvent.

    */
    inline void UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID);

    /*
    Method UnregisterPersistentEvent

    Unregisters the specified Command for the specified EventID for the specified DeviceID. UnregisterPersistentEvent should only be called for the Command, Name, Description, Icon, EventID and DeviceID for which you called RegisterPersistentEvent.

    */
    inline void UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

// member function implementation
#ifndef QAX_DUMPCPP_WIA_NOINLINES
inline int IRational::Denominator() const
{
    QVariant qax_result = property("Denominator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IRational::SetDenominator(int value){ setProperty("Denominator", QVariant(value)); }

inline int IRational::Numerator() const
{
    QVariant qax_result = property("Numerator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IRational::SetNumerator(int value){ setProperty("Numerator", QVariant(value)); }

inline double IRational::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline int Rational::Denominator() const
{
    QVariant qax_result = property("Denominator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Rational::SetDenominator(int value){ setProperty("Denominator", QVariant(value)); }

inline int Rational::Numerator() const
{
    QVariant qax_result = property("Numerator");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Rational::SetNumerator(int value){ setProperty("Numerator", QVariant(value)); }

inline double Rational::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline WIA::IVector* IImageFile::ARGBData() const
{
    WIA::IVector* qax_pointer = 0;
    qRegisterMetaType<WIA::IVector*>("IVector*", &qax_pointer);
    qRegisterMetaType<WIA::IVector>("IVector", qax_pointer);
    QVariant qax_result = property("ARGBData");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IVector**)qax_result.constData();
}

inline int IImageFile::ActiveFrame() const
{
    QVariant qax_result = property("ActiveFrame");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IImageFile::SetActiveFrame(int value){ setProperty("ActiveFrame", QVariant(value)); }

inline WIA::IVector* IImageFile::FileData() const
{
    WIA::IVector* qax_pointer = 0;
    qRegisterMetaType<WIA::IVector*>("IVector*", &qax_pointer);
    qRegisterMetaType<WIA::IVector>("IVector", qax_pointer);
    QVariant qax_result = property("FileData");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IVector**)qax_result.constData();
}

inline QString IImageFile::FileExtension() const
{
    QVariant qax_result = property("FileExtension");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IImageFile::FormatID() const
{
    QVariant qax_result = property("FormatID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IImageFile::FrameCount() const
{
    QVariant qax_result = property("FrameCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IImageFile::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double IImageFile::HorizontalResolution() const
{
    QVariant qax_result = property("HorizontalResolution");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline bool IImageFile::IsAlphaPixelFormat() const
{
    QVariant qax_result = property("IsAlphaPixelFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IImageFile::IsAnimated() const
{
    QVariant qax_result = property("IsAnimated");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IImageFile::IsExtendedPixelFormat() const
{
    QVariant qax_result = property("IsExtendedPixelFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IImageFile::IsIndexedPixelFormat() const
{
    QVariant qax_result = property("IsIndexedPixelFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IImageFile::PixelDepth() const
{
    QVariant qax_result = property("PixelDepth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline WIA::IProperties* IImageFile::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline double IImageFile::VerticalResolution() const
{
    QVariant qax_result = property("VerticalResolution");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int IImageFile::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IImageFile::LoadFile(const QString& Filename)
{
    void *_a[] = {0, (void*)&Filename};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IImageFile::SaveFile(const QString& Filename)
{
    void *_a[] = {0, (void*)&Filename};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline QVariant IVector::BinaryData() const
{
    QVariant qax_result = property("BinaryData");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void IVector::SetBinaryData(const QVariant& value){ setProperty("BinaryData", QVariant(value)); }

inline int IVector::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QDateTime IVector::Date() const
{
    QVariant qax_result = property("Date");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}
inline void IVector::SetDate(const QDateTime& value){ setProperty("Date", QVariant(value)); }

inline IUnknown* IVector::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void IVector::Add(QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IVector::Add(QVariant& Value, int Index)
{
    void *_a[] = {0, (void*)&Value, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IVector::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline WIA::IImageFile* IVector::ImageFile()
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline WIA::IImageFile* IVector::ImageFile(int Width)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline WIA::IImageFile* IVector::ImageFile(int Width, int Height)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QVariant IVector::Item(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QVariant IVector::Picture()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QVariant IVector::Picture(int Width)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline QVariant IVector::Picture(int Width, int Height)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QVariant IVector::Remove(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void IVector::SetFromString(const QString& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IVector::SetFromString(const QString& Value, bool Resizable)
{
    void *_a[] = {0, (void*)&Value, (void*)&Resizable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IVector::SetFromString(const QString& Value, bool Resizable, bool Unicode)
{
    void *_a[] = {0, (void*)&Value, (void*)&Resizable, (void*)&Unicode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IVector::SetItem(int Index, QVariant& rhs)
{
    void *_a[] = {0, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline QString IVector::String()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString IVector::String(bool Unicode)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Unicode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}


inline int IProperties::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IProperties::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool IProperties::Exists(QVariant& Index)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline WIA::IProperty* IProperties::Item(QVariant& Index)
{
    WIA::IProperty* qax_result = 0;
    qRegisterMetaType<WIA::IProperty*>("IProperty*", &qax_result);
    qRegisterMetaType<WIA::IProperty>("IProperty", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline bool IProperty::IsReadOnly() const
{
    QVariant qax_result = property("IsReadOnly");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IProperty::IsVector() const
{
    QVariant qax_result = property("IsVector");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IProperty::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IProperty::PropertyID() const
{
    QVariant qax_result = property("PropertyID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline WIA::WiaSubType IProperty::SubType() const
{
    QVariant qax_result = property("SubType");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaSubType*)qax_result.constData();
}

inline QVariant IProperty::SubTypeDefault() const
{
    QVariant qax_result = property("SubTypeDefault");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline int IProperty::SubTypeMax() const
{
    QVariant qax_result = property("SubTypeMax");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IProperty::SubTypeMin() const
{
    QVariant qax_result = property("SubTypeMin");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IProperty::SubTypeStep() const
{
    QVariant qax_result = property("SubTypeStep");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline WIA::IVector* IProperty::SubTypeValues() const
{
    WIA::IVector* qax_pointer = 0;
    qRegisterMetaType<WIA::IVector*>("IVector*", &qax_pointer);
    qRegisterMetaType<WIA::IVector>("IVector", qax_pointer);
    QVariant qax_result = property("SubTypeValues");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IVector**)qax_result.constData();
}

inline int IProperty::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QVariant IProperty::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void IProperty::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }


inline QVariant Vector::BinaryData() const
{
    QVariant qax_result = property("BinaryData");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Vector::SetBinaryData(const QVariant& value){ setProperty("BinaryData", QVariant(value)); }

inline int Vector::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QDateTime Vector::Date() const
{
    QVariant qax_result = property("Date");
    Q_ASSERT(qax_result.isValid());
    return *(QDateTime*)qax_result.constData();
}
inline void Vector::SetDate(const QDateTime& value){ setProperty("Date", QVariant(value)); }

inline IUnknown* Vector::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void Vector::Add(QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Vector::Add(QVariant& Value, int Index)
{
    void *_a[] = {0, (void*)&Value, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Vector::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline WIA::IImageFile* Vector::ImageFile()
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline WIA::IImageFile* Vector::ImageFile(int Width)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline WIA::IImageFile* Vector::ImageFile(int Width, int Height)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QVariant Vector::Item(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QVariant Vector::Picture()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QVariant Vector::Picture(int Width)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Width};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline QVariant Vector::Picture(int Width, int Height)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QVariant Vector::Remove(int Index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void Vector::SetFromString(const QString& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void Vector::SetFromString(const QString& Value, bool Resizable)
{
    void *_a[] = {0, (void*)&Value, (void*)&Resizable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void Vector::SetFromString(const QString& Value, bool Resizable, bool Unicode)
{
    void *_a[] = {0, (void*)&Value, (void*)&Resizable, (void*)&Unicode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Vector::SetItem(int Index, QVariant& rhs)
{
    void *_a[] = {0, (void*)&Index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline QString Vector::String()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString Vector::String(bool Unicode)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Unicode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}


inline bool Property::IsReadOnly() const
{
    QVariant qax_result = property("IsReadOnly");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool Property::IsVector() const
{
    QVariant qax_result = property("IsVector");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString Property::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Property::PropertyID() const
{
    QVariant qax_result = property("PropertyID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline WIA::WiaSubType Property::SubType() const
{
    QVariant qax_result = property("SubType");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaSubType*)qax_result.constData();
}

inline QVariant Property::SubTypeDefault() const
{
    QVariant qax_result = property("SubTypeDefault");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline int Property::SubTypeMax() const
{
    QVariant qax_result = property("SubTypeMax");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Property::SubTypeMin() const
{
    QVariant qax_result = property("SubTypeMin");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Property::SubTypeStep() const
{
    QVariant qax_result = property("SubTypeStep");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline WIA::IVector* Property::SubTypeValues() const
{
    WIA::IVector* qax_pointer = 0;
    qRegisterMetaType<WIA::IVector*>("IVector*", &qax_pointer);
    qRegisterMetaType<WIA::IVector>("IVector", qax_pointer);
    QVariant qax_result = property("SubTypeValues");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IVector**)qax_result.constData();
}

inline int Property::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QVariant Property::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void Property::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }


inline int Properties::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* Properties::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline bool Properties::Exists(QVariant& Index)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline WIA::IProperty* Properties::Item(QVariant& Index)
{
    WIA::IProperty* qax_result = 0;
    qRegisterMetaType<WIA::IProperty*>("IProperty*", &qax_result);
    qRegisterMetaType<WIA::IProperty>("IProperty", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline WIA::IVector* ImageFile::ARGBData() const
{
    WIA::IVector* qax_pointer = 0;
    qRegisterMetaType<WIA::IVector*>("IVector*", &qax_pointer);
    qRegisterMetaType<WIA::IVector>("IVector", qax_pointer);
    QVariant qax_result = property("ARGBData");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IVector**)qax_result.constData();
}

inline int ImageFile::ActiveFrame() const
{
    QVariant qax_result = property("ActiveFrame");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ImageFile::SetActiveFrame(int value){ setProperty("ActiveFrame", QVariant(value)); }

inline WIA::IVector* ImageFile::FileData() const
{
    WIA::IVector* qax_pointer = 0;
    qRegisterMetaType<WIA::IVector*>("IVector*", &qax_pointer);
    qRegisterMetaType<WIA::IVector>("IVector", qax_pointer);
    QVariant qax_result = property("FileData");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IVector**)qax_result.constData();
}

inline QString ImageFile::FileExtension() const
{
    QVariant qax_result = property("FileExtension");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ImageFile::FormatID() const
{
    QVariant qax_result = property("FormatID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int ImageFile::FrameCount() const
{
    QVariant qax_result = property("FrameCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ImageFile::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double ImageFile::HorizontalResolution() const
{
    QVariant qax_result = property("HorizontalResolution");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline bool ImageFile::IsAlphaPixelFormat() const
{
    QVariant qax_result = property("IsAlphaPixelFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool ImageFile::IsAnimated() const
{
    QVariant qax_result = property("IsAnimated");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool ImageFile::IsExtendedPixelFormat() const
{
    QVariant qax_result = property("IsExtendedPixelFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool ImageFile::IsIndexedPixelFormat() const
{
    QVariant qax_result = property("IsIndexedPixelFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int ImageFile::PixelDepth() const
{
    QVariant qax_result = property("PixelDepth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline WIA::IProperties* ImageFile::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline double ImageFile::VerticalResolution() const
{
    QVariant qax_result = property("VerticalResolution");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int ImageFile::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void ImageFile::LoadFile(const QString& Filename)
{
    void *_a[] = {0, (void*)&Filename};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ImageFile::SaveFile(const QString& Filename)
{
    void *_a[] = {0, (void*)&Filename};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline QString IFilterInfo::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IFilterInfo::FilterID() const
{
    QVariant qax_result = property("FilterID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IFilterInfo::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline QString FilterInfo::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString FilterInfo::FilterID() const
{
    QVariant qax_result = property("FilterID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString FilterInfo::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline int IFilterInfos::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IFilterInfos::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IFilterInfo* IFilterInfos::Item(QVariant& Index)
{
    WIA::IFilterInfo* qax_result = 0;
    qRegisterMetaType<WIA::IFilterInfo*>("IFilterInfo*", &qax_result);
    qRegisterMetaType<WIA::IFilterInfo>("IFilterInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int FilterInfos::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* FilterInfos::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IFilterInfo* FilterInfos::Item(QVariant& Index)
{
    WIA::IFilterInfo* qax_result = 0;
    qRegisterMetaType<WIA::IFilterInfo*>("IFilterInfo*", &qax_result);
    qRegisterMetaType<WIA::IFilterInfo>("IFilterInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline QString IFilter::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IFilter::FilterID() const
{
    QVariant qax_result = property("FilterID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IFilter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IProperties* IFilter::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}


inline QString Filter::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Filter::FilterID() const
{
    QVariant qax_result = property("FilterID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Filter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IProperties* Filter::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}


inline int IFilters::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IFilters::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void IFilters::Add(const QString& FilterID)
{
    void *_a[] = {0, (void*)&FilterID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IFilters::Add(const QString& FilterID, int Index)
{
    void *_a[] = {0, (void*)&FilterID, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline WIA::IFilter* IFilters::Item(int Index)
{
    WIA::IFilter* qax_result = 0;
    qRegisterMetaType<WIA::IFilter*>("IFilter*", &qax_result);
    qRegisterMetaType<WIA::IFilter>("IFilter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IFilters::Remove(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline int Filters::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* Filters::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void Filters::Add(const QString& FilterID)
{
    void *_a[] = {0, (void*)&FilterID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Filters::Add(const QString& FilterID, int Index)
{
    void *_a[] = {0, (void*)&FilterID, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline WIA::IFilter* Filters::Item(int Index)
{
    WIA::IFilter* qax_result = 0;
    qRegisterMetaType<WIA::IFilter*>("IFilter*", &qax_result);
    qRegisterMetaType<WIA::IFilter>("IFilter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void Filters::Remove(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline WIA::IFilterInfos* IImageProcess::FilterInfos() const
{
    WIA::IFilterInfos* qax_pointer = 0;
    qRegisterMetaType<WIA::IFilterInfos*>("IFilterInfos*", &qax_pointer);
    qRegisterMetaType<WIA::IFilterInfos>("IFilterInfos", qax_pointer);
    QVariant qax_result = property("FilterInfos");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IFilterInfos**)qax_result.constData();
}

inline WIA::IFilters* IImageProcess::Filters() const
{
    WIA::IFilters* qax_pointer = 0;
    qRegisterMetaType<WIA::IFilters*>("IFilters*", &qax_pointer);
    qRegisterMetaType<WIA::IFilters>("IFilters", qax_pointer);
    QVariant qax_result = property("Filters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IFilters**)qax_result.constData();
}

inline WIA::IImageFile* IImageProcess::Apply(WIA::IImageFile* Source)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline WIA::IFilterInfos* ImageProcess::FilterInfos() const
{
    WIA::IFilterInfos* qax_pointer = 0;
    qRegisterMetaType<WIA::IFilterInfos*>("IFilterInfos*", &qax_pointer);
    qRegisterMetaType<WIA::IFilterInfos>("IFilterInfos", qax_pointer);
    QVariant qax_result = property("FilterInfos");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IFilterInfos**)qax_result.constData();
}

inline WIA::IFilters* ImageProcess::Filters() const
{
    WIA::IFilters* qax_pointer = 0;
    qRegisterMetaType<WIA::IFilters*>("IFilters*", &qax_pointer);
    qRegisterMetaType<WIA::IFilters>("IFilters", qax_pointer);
    QVariant qax_result = property("Filters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IFilters**)qax_result.constData();
}

inline WIA::IImageFile* ImageProcess::Apply(WIA::IImageFile* Source)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Source};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int IFormats::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IFormats::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline QString IFormats::Item(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int Formats::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* Formats::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline QString Formats::Item(int Index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline QString IDeviceCommand::CommandID() const
{
    QVariant qax_result = property("CommandID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IDeviceCommand::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IDeviceCommand::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline QString DeviceCommand::CommandID() const
{
    QVariant qax_result = property("CommandID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString DeviceCommand::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString DeviceCommand::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline int IDeviceCommands::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IDeviceCommands::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IDeviceCommand* IDeviceCommands::Item(int Index)
{
    WIA::IDeviceCommand* qax_result = 0;
    qRegisterMetaType<WIA::IDeviceCommand*>("IDeviceCommand*", &qax_result);
    qRegisterMetaType<WIA::IDeviceCommand>("IDeviceCommand", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int DeviceCommands::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* DeviceCommands::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IDeviceCommand* DeviceCommands::Item(int Index)
{
    WIA::IDeviceCommand* qax_result = 0;
    qRegisterMetaType<WIA::IDeviceCommand*>("IDeviceCommand*", &qax_result);
    qRegisterMetaType<WIA::IDeviceCommand>("IDeviceCommand", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int IItems::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IItems::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void IItems::Add(const QString& Name, int Flags)
{
    void *_a[] = {0, (void*)&Name, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline WIA::IItem* IItems::Item(int Index)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IItems::Remove(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline WIA::IDeviceCommands* IItem::Commands() const
{
    WIA::IDeviceCommands* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceCommands*>("IDeviceCommands*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceCommands>("IDeviceCommands", qax_pointer);
    QVariant qax_result = property("Commands");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceCommands**)qax_result.constData();
}

inline WIA::IFormats* IItem::Formats() const
{
    WIA::IFormats* qax_pointer = 0;
    qRegisterMetaType<WIA::IFormats*>("IFormats*", &qax_pointer);
    qRegisterMetaType<WIA::IFormats>("IFormats", qax_pointer);
    QVariant qax_result = property("Formats");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IFormats**)qax_result.constData();
}

inline QString IItem::ItemID() const
{
    QVariant qax_result = property("ItemID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IItems* IItem::Items() const
{
    WIA::IItems* qax_pointer = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_pointer);
    qRegisterMetaType<WIA::IItems>("IItems", qax_pointer);
    QVariant qax_result = property("Items");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IItems**)qax_result.constData();
}

inline WIA::IProperties* IItem::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline IUnknown* IItem::WiaItem() const
{
    QVariant qax_result = property("WiaItem");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IItem* IItem::ExecuteCommand(const QString& CommandID)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant IItem::Transfer()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant IItem::Transfer(const QString& FormatID)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FormatID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline WIA::IDeviceCommands* Item::Commands() const
{
    WIA::IDeviceCommands* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceCommands*>("IDeviceCommands*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceCommands>("IDeviceCommands", qax_pointer);
    QVariant qax_result = property("Commands");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceCommands**)qax_result.constData();
}

inline WIA::IFormats* Item::Formats() const
{
    WIA::IFormats* qax_pointer = 0;
    qRegisterMetaType<WIA::IFormats*>("IFormats*", &qax_pointer);
    qRegisterMetaType<WIA::IFormats>("IFormats", qax_pointer);
    QVariant qax_result = property("Formats");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IFormats**)qax_result.constData();
}

inline QString Item::ItemID() const
{
    QVariant qax_result = property("ItemID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IItems* Item::Items() const
{
    WIA::IItems* qax_pointer = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_pointer);
    qRegisterMetaType<WIA::IItems>("IItems", qax_pointer);
    QVariant qax_result = property("Items");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IItems**)qax_result.constData();
}

inline WIA::IProperties* Item::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline IUnknown* Item::WiaItem() const
{
    QVariant qax_result = property("WiaItem");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IItem* Item::ExecuteCommand(const QString& CommandID)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant Item::Transfer()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant Item::Transfer(const QString& FormatID)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FormatID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int Items::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* Items::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline void Items::Add(const QString& Name, int Flags)
{
    void *_a[] = {0, (void*)&Name, (void*)&Flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline WIA::IItem* Items::Item(int Index)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void Items::Remove(int Index)
{
    void *_a[] = {0, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline QString IDeviceEvent::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IDeviceEvent::EventID() const
{
    QVariant qax_result = property("EventID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IDeviceEvent::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::WiaEventFlag IDeviceEvent::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaEventFlag*)qax_result.constData();
}


inline QString DeviceEvent::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString DeviceEvent::EventID() const
{
    QVariant qax_result = property("EventID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString DeviceEvent::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::WiaEventFlag DeviceEvent::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaEventFlag*)qax_result.constData();
}


inline int IDeviceEvents::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IDeviceEvents::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IDeviceEvent* IDeviceEvents::Item(int Index)
{
    WIA::IDeviceEvent* qax_result = 0;
    qRegisterMetaType<WIA::IDeviceEvent*>("IDeviceEvent*", &qax_result);
    qRegisterMetaType<WIA::IDeviceEvent>("IDeviceEvent", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int DeviceEvents::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* DeviceEvents::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IDeviceEvent* DeviceEvents::Item(int Index)
{
    WIA::IDeviceEvent* qax_result = 0;
    qRegisterMetaType<WIA::IDeviceEvent*>("IDeviceEvent*", &qax_result);
    qRegisterMetaType<WIA::IDeviceEvent>("IDeviceEvent", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline WIA::IDeviceCommands* IDevice::Commands() const
{
    WIA::IDeviceCommands* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceCommands*>("IDeviceCommands*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceCommands>("IDeviceCommands", qax_pointer);
    QVariant qax_result = property("Commands");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceCommands**)qax_result.constData();
}

inline QString IDevice::DeviceID() const
{
    QVariant qax_result = property("DeviceID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IDeviceEvents* IDevice::Events() const
{
    WIA::IDeviceEvents* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceEvents*>("IDeviceEvents*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceEvents>("IDeviceEvents", qax_pointer);
    QVariant qax_result = property("Events");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceEvents**)qax_result.constData();
}

inline WIA::IItems* IDevice::Items() const
{
    WIA::IItems* qax_pointer = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_pointer);
    qRegisterMetaType<WIA::IItems>("IItems", qax_pointer);
    QVariant qax_result = property("Items");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IItems**)qax_result.constData();
}

inline WIA::IProperties* IDevice::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline WIA::WiaDeviceType IDevice::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaDeviceType*)qax_result.constData();
}

inline IUnknown* IDevice::WiaItem() const
{
    QVariant qax_result = property("WiaItem");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IItem* IDevice::ExecuteCommand(const QString& CommandID)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline WIA::IItem* IDevice::GetItem(const QString& ItemID)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline QString IDeviceInfo::DeviceID() const
{
    QVariant qax_result = property("DeviceID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IProperties* IDeviceInfo::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline WIA::WiaDeviceType IDeviceInfo::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaDeviceType*)qax_result.constData();
}

inline WIA::IDevice* IDeviceInfo::Connect()
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline QString DeviceInfo::DeviceID() const
{
    QVariant qax_result = property("DeviceID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IProperties* DeviceInfo::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline WIA::WiaDeviceType DeviceInfo::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaDeviceType*)qax_result.constData();
}

inline WIA::IDevice* DeviceInfo::Connect()
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int IDeviceInfos::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IDeviceInfos::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IDeviceInfo* IDeviceInfos::Item(QVariant& Index)
{
    WIA::IDeviceInfo* qax_result = 0;
    qRegisterMetaType<WIA::IDeviceInfo*>("IDeviceInfo*", &qax_result);
    qRegisterMetaType<WIA::IDeviceInfo>("IDeviceInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int DeviceInfos::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* DeviceInfos::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IDeviceInfo* DeviceInfos::Item(QVariant& Index)
{
    WIA::IDeviceInfo* qax_result = 0;
    qRegisterMetaType<WIA::IDeviceInfo*>("IDeviceInfo*", &qax_result);
    qRegisterMetaType<WIA::IDeviceInfo>("IDeviceInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline WIA::IDeviceCommands* Device::Commands() const
{
    WIA::IDeviceCommands* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceCommands*>("IDeviceCommands*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceCommands>("IDeviceCommands", qax_pointer);
    QVariant qax_result = property("Commands");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceCommands**)qax_result.constData();
}

inline QString Device::DeviceID() const
{
    QVariant qax_result = property("DeviceID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline WIA::IDeviceEvents* Device::Events() const
{
    WIA::IDeviceEvents* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceEvents*>("IDeviceEvents*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceEvents>("IDeviceEvents", qax_pointer);
    QVariant qax_result = property("Events");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceEvents**)qax_result.constData();
}

inline WIA::IItems* Device::Items() const
{
    WIA::IItems* qax_pointer = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_pointer);
    qRegisterMetaType<WIA::IItems>("IItems", qax_pointer);
    QVariant qax_result = property("Items");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IItems**)qax_result.constData();
}

inline WIA::IProperties* Device::Properties() const
{
    WIA::IProperties* qax_pointer = 0;
    qRegisterMetaType<WIA::IProperties*>("IProperties*", &qax_pointer);
    qRegisterMetaType<WIA::IProperties>("IProperties", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IProperties**)qax_result.constData();
}

inline WIA::WiaDeviceType Device::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(WIA::WiaDeviceType*)qax_result.constData();
}

inline IUnknown* Device::WiaItem() const
{
    QVariant qax_result = property("WiaItem");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline WIA::IItem* Device::ExecuteCommand(const QString& CommandID)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&CommandID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline WIA::IItem* Device::GetItem(const QString& ItemID)
{
    WIA::IItem* qax_result = 0;
    qRegisterMetaType<WIA::IItem*>("IItem*", &qax_result);
    qRegisterMetaType<WIA::IItem>("IItem", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ItemID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline WIA::IImageFile* ICommonDialog::ShowAcquireImage()
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline WIA::IImageFile* ICommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline WIA::IImageFile* ICommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline WIA::IImageFile* ICommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline WIA::IImageFile* ICommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline WIA::IImageFile* ICommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID, (void*)&AlwaysSelectDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline WIA::IImageFile* ICommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID, (void*)&AlwaysSelectDevice, (void*)&UseCommonUI};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline WIA::IImageFile* ICommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI, bool CancelError)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID, (void*)&AlwaysSelectDevice, (void*)&UseCommonUI, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QVariant ICommonDialog::ShowAcquisitionWizard(WIA::IDevice* Device)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Device};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void ICommonDialog::ShowDeviceProperties(WIA::IDevice* Device)
{
    void *_a[] = {0, (void*)&Device};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ICommonDialog::ShowDeviceProperties(WIA::IDevice* Device, bool CancelError)
{
    void *_a[] = {0, (void*)&Device, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ICommonDialog::ShowItemProperties(WIA::IItem* Item)
{
    void *_a[] = {0, (void*)&Item};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void ICommonDialog::ShowItemProperties(WIA::IItem* Item, bool CancelError)
{
    void *_a[] = {0, (void*)&Item, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void ICommonDialog::ShowPhotoPrintingWizard(QVariant& Files)
{
    void *_a[] = {0, (void*)&Files};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline WIA::IDevice* ICommonDialog::ShowSelectDevice()
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline WIA::IDevice* ICommonDialog::ShowSelectDevice(WIA::WiaDeviceType DeviceType)
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline WIA::IDevice* ICommonDialog::ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice)
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&AlwaysSelectDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline WIA::IDevice* ICommonDialog::ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice, bool CancelError)
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&AlwaysSelectDevice, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline WIA::IItems* ICommonDialog::ShowSelectItems(WIA::IDevice* Device)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline WIA::IItems* ICommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline WIA::IItems* ICommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline WIA::IItems* ICommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias, (void*)&SingleSelect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline WIA::IItems* ICommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias, (void*)&SingleSelect, (void*)&UseCommonUI};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline WIA::IItems* ICommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI, bool CancelError)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias, (void*)&SingleSelect, (void*)&UseCommonUI, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline QVariant ICommonDialog::ShowTransfer(WIA::IItem* Item)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QVariant ICommonDialog::ShowTransfer(WIA::IItem* Item, const QString& FormatID)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item, (void*)&FormatID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline QVariant ICommonDialog::ShowTransfer(WIA::IItem* Item, const QString& FormatID, bool CancelError)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item, (void*)&FormatID, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}


inline WIA::IImageFile* CommonDialog::ShowAcquireImage()
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline WIA::IImageFile* CommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline WIA::IImageFile* CommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline WIA::IImageFile* CommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline WIA::IImageFile* CommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline WIA::IImageFile* CommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID, (void*)&AlwaysSelectDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline WIA::IImageFile* CommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID, (void*)&AlwaysSelectDevice, (void*)&UseCommonUI};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline WIA::IImageFile* CommonDialog::ShowAcquireImage(WIA::WiaDeviceType DeviceType, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, const QString& FormatID, bool AlwaysSelectDevice, bool UseCommonUI, bool CancelError)
{
    WIA::IImageFile* qax_result = 0;
    qRegisterMetaType<WIA::IImageFile*>("IImageFile*", &qax_result);
    qRegisterMetaType<WIA::IImageFile>("IImageFile", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&Intent, (void*)&Bias, (void*)&FormatID, (void*)&AlwaysSelectDevice, (void*)&UseCommonUI, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline QVariant CommonDialog::ShowAcquisitionWizard(WIA::IDevice* Device)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Device};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void CommonDialog::ShowDeviceProperties(WIA::IDevice* Device)
{
    void *_a[] = {0, (void*)&Device};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void CommonDialog::ShowDeviceProperties(WIA::IDevice* Device, bool CancelError)
{
    void *_a[] = {0, (void*)&Device, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void CommonDialog::ShowItemProperties(WIA::IItem* Item)
{
    void *_a[] = {0, (void*)&Item};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void CommonDialog::ShowItemProperties(WIA::IItem* Item, bool CancelError)
{
    void *_a[] = {0, (void*)&Item, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void CommonDialog::ShowPhotoPrintingWizard(QVariant& Files)
{
    void *_a[] = {0, (void*)&Files};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline WIA::IDevice* CommonDialog::ShowSelectDevice()
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline WIA::IDevice* CommonDialog::ShowSelectDevice(WIA::WiaDeviceType DeviceType)
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline WIA::IDevice* CommonDialog::ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice)
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&AlwaysSelectDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline WIA::IDevice* CommonDialog::ShowSelectDevice(WIA::WiaDeviceType DeviceType, bool AlwaysSelectDevice, bool CancelError)
{
    WIA::IDevice* qax_result = 0;
    qRegisterMetaType<WIA::IDevice*>("IDevice*", &qax_result);
    qRegisterMetaType<WIA::IDevice>("IDevice", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&DeviceType, (void*)&AlwaysSelectDevice, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline WIA::IItems* CommonDialog::ShowSelectItems(WIA::IDevice* Device)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline WIA::IItems* CommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline WIA::IItems* CommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline WIA::IItems* CommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias, (void*)&SingleSelect};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline WIA::IItems* CommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias, (void*)&SingleSelect, (void*)&UseCommonUI};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline WIA::IItems* CommonDialog::ShowSelectItems(WIA::IDevice* Device, WIA::WiaImageIntent Intent, WIA::WiaImageBias Bias, bool SingleSelect, bool UseCommonUI, bool CancelError)
{
    WIA::IItems* qax_result = 0;
    qRegisterMetaType<WIA::IItems*>("IItems*", &qax_result);
    qRegisterMetaType<WIA::IItems>("IItems", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Device, (void*)&Intent, (void*)&Bias, (void*)&SingleSelect, (void*)&UseCommonUI, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline QVariant CommonDialog::ShowTransfer(WIA::IItem* Item)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline QVariant CommonDialog::ShowTransfer(WIA::IItem* Item, const QString& FormatID)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item, (void*)&FormatID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline QVariant CommonDialog::ShowTransfer(WIA::IItem* Item, const QString& FormatID, bool CancelError)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Item, (void*)&FormatID, (void*)&CancelError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}


inline WIA::IDeviceInfos* IDeviceManager::DeviceInfos() const
{
    WIA::IDeviceInfos* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceInfos*>("IDeviceInfos*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceInfos>("IDeviceInfos", qax_pointer);
    QVariant qax_result = property("DeviceInfos");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceInfos**)qax_result.constData();
}

inline void IDeviceManager::RegisterEvent(const QString& EventID)
{
    void *_a[] = {0, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IDeviceManager::RegisterEvent(const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IDeviceManager::RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IDeviceManager::RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IDeviceManager::UnregisterEvent(const QString& EventID)
{
    void *_a[] = {0, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IDeviceManager::UnregisterEvent(const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IDeviceManager::UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IDeviceManager::UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline WIA::IDeviceInfos* DeviceManager::DeviceInfos() const
{
    WIA::IDeviceInfos* qax_pointer = 0;
    qRegisterMetaType<WIA::IDeviceInfos*>("IDeviceInfos*", &qax_pointer);
    qRegisterMetaType<WIA::IDeviceInfos>("IDeviceInfos", qax_pointer);
    QVariant qax_result = property("DeviceInfos");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(WIA::IDeviceInfos**)qax_result.constData();
}

inline void DeviceManager::RegisterEvent(const QString& EventID)
{
    void *_a[] = {0, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void DeviceManager::RegisterEvent(const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void DeviceManager::RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void DeviceManager::RegisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void DeviceManager::UnregisterEvent(const QString& EventID)
{
    void *_a[] = {0, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void DeviceManager::UnregisterEvent(const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void DeviceManager::UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void DeviceManager::UnregisterPersistentEvent(const QString& Command, const QString& Name, const QString& Description, const QString& Icon, const QString& EventID, const QString& DeviceID)
{
    void *_a[] = {0, (void*)&Command, (void*)&Name, (void*)&Description, (void*)&Icon, (void*)&EventID, (void*)&DeviceID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<WIA::IRational, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IRational*>(t)->WIA::IRational::~IRational();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IRational;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IRational*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IRational*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Rational, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Rational*>(t)->WIA::Rational::~Rational();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Rational;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Rational*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Rational*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IImageFile, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IImageFile*>(t)->WIA::IImageFile::~IImageFile();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IImageFile;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IImageFile*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IImageFile*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IVector, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IVector*>(t)->WIA::IVector::~IVector();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IVector;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IVector*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IVector*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IProperties, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IProperties*>(t)->WIA::IProperties::~IProperties();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IProperties;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IProperties*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IProperties*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IProperty, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IProperty*>(t)->WIA::IProperty::~IProperty();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IProperty;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IProperty*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IProperty*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Vector, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Vector*>(t)->WIA::Vector::~Vector();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Vector;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Vector*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Vector*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Property, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Property*>(t)->WIA::Property::~Property();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Property;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Property*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Property*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Properties, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Properties*>(t)->WIA::Properties::~Properties();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Properties;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Properties*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Properties*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::ImageFile, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::ImageFile*>(t)->WIA::ImageFile::~ImageFile();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::ImageFile;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::ImageFile*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::ImageFile*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IFilterInfo, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IFilterInfo*>(t)->WIA::IFilterInfo::~IFilterInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IFilterInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IFilterInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IFilterInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::FilterInfo, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::FilterInfo*>(t)->WIA::FilterInfo::~FilterInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::FilterInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::FilterInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::FilterInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IFilterInfos, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IFilterInfos*>(t)->WIA::IFilterInfos::~IFilterInfos();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IFilterInfos;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IFilterInfos*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IFilterInfos*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::FilterInfos, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::FilterInfos*>(t)->WIA::FilterInfos::~FilterInfos();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::FilterInfos;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::FilterInfos*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::FilterInfos*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IFilter, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IFilter*>(t)->WIA::IFilter::~IFilter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IFilter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IFilter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IFilter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Filter, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Filter*>(t)->WIA::Filter::~Filter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Filter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Filter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Filter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IFilters, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IFilters*>(t)->WIA::IFilters::~IFilters();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IFilters;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IFilters*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IFilters*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Filters, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Filters*>(t)->WIA::Filters::~Filters();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Filters;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Filters*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Filters*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IImageProcess, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IImageProcess*>(t)->WIA::IImageProcess::~IImageProcess();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IImageProcess;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IImageProcess*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IImageProcess*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::ImageProcess, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::ImageProcess*>(t)->WIA::ImageProcess::~ImageProcess();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::ImageProcess;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::ImageProcess*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::ImageProcess*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IFormats, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IFormats*>(t)->WIA::IFormats::~IFormats();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IFormats;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IFormats*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IFormats*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Formats, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Formats*>(t)->WIA::Formats::~Formats();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Formats;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Formats*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Formats*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDeviceCommand, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDeviceCommand*>(t)->WIA::IDeviceCommand::~IDeviceCommand();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDeviceCommand;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDeviceCommand*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDeviceCommand*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::DeviceCommand, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::DeviceCommand*>(t)->WIA::DeviceCommand::~DeviceCommand();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::DeviceCommand;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::DeviceCommand*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::DeviceCommand*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDeviceCommands, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDeviceCommands*>(t)->WIA::IDeviceCommands::~IDeviceCommands();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDeviceCommands;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDeviceCommands*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDeviceCommands*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::DeviceCommands, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::DeviceCommands*>(t)->WIA::DeviceCommands::~DeviceCommands();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::DeviceCommands;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::DeviceCommands*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::DeviceCommands*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IItems, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IItems*>(t)->WIA::IItems::~IItems();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IItems;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IItems*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IItems*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IItem, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IItem*>(t)->WIA::IItem::~IItem();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IItem;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IItem*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IItem*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Item, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Item*>(t)->WIA::Item::~Item();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Item;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Item*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Item*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Items, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Items*>(t)->WIA::Items::~Items();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Items;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Items*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Items*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDeviceEvent, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDeviceEvent*>(t)->WIA::IDeviceEvent::~IDeviceEvent();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDeviceEvent;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDeviceEvent*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDeviceEvent*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::DeviceEvent, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::DeviceEvent*>(t)->WIA::DeviceEvent::~DeviceEvent();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::DeviceEvent;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::DeviceEvent*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::DeviceEvent*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDeviceEvents, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDeviceEvents*>(t)->WIA::IDeviceEvents::~IDeviceEvents();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDeviceEvents;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDeviceEvents*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDeviceEvents*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::DeviceEvents, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::DeviceEvents*>(t)->WIA::DeviceEvents::~DeviceEvents();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::DeviceEvents;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::DeviceEvents*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::DeviceEvents*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDevice, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDevice*>(t)->WIA::IDevice::~IDevice();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDevice;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDevice*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDevice*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDeviceInfo, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDeviceInfo*>(t)->WIA::IDeviceInfo::~IDeviceInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDeviceInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDeviceInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDeviceInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::DeviceInfo, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::DeviceInfo*>(t)->WIA::DeviceInfo::~DeviceInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::DeviceInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::DeviceInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::DeviceInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDeviceInfos, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDeviceInfos*>(t)->WIA::IDeviceInfos::~IDeviceInfos();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDeviceInfos;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDeviceInfos*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDeviceInfos*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::DeviceInfos, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::DeviceInfos*>(t)->WIA::DeviceInfos::~DeviceInfos();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::DeviceInfos;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::DeviceInfos*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::DeviceInfos*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::Device, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::Device*>(t)->WIA::Device::~Device();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::Device;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::Device*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::Device*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::ICommonDialog, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::ICommonDialog*>(t)->WIA::ICommonDialog::~ICommonDialog();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::ICommonDialog;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::ICommonDialog*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::ICommonDialog*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::CommonDialog, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::CommonDialog*>(t)->WIA::CommonDialog::~CommonDialog();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::CommonDialog;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::CommonDialog*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::CommonDialog*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::IDeviceManager, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::IDeviceManager*>(t)->WIA::IDeviceManager::~IDeviceManager();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::IDeviceManager;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::IDeviceManager*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::IDeviceManager*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WIA::DeviceManager, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WIA::DeviceManager*>(t)->WIA::DeviceManager::~DeviceManager();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WIA::DeviceManager;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WIA::DeviceManager*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WIA::DeviceManager*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

